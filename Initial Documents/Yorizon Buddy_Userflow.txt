# Yorizon Buddy V1.2 User Flows

Based on the project scope, MVP roadmap, and technical requirements, I've created comprehensive user flows focusing on the core functionality while indicating which components are essential for the MVP versus future phases.

## User Types
1. Knowledge Worker - Primary user conducting research and collecting information
2. Content Creator - User focused on generating content based on web research
3. Professional - User integrating web data into specialized workflows
4. Administrator - User configuring system settings and security

---

## 1. Core User Flows (MVP Essential)

### 1.1 First-Time User Onboarding

**Trigger:** User installs the Chrome extension and opens it for the first time

1. **Browser Extension Installation** (Chrome Web Store)
   - User installs extension from Chrome Web Store
   - Browser shows installation confirmation
   - Extension icon appears in toolbar

2. **Initial Launch** (Chrome Browser)
   - User clicks extension icon in Chrome toolbar
   - System opens side panel with welcome screen
   - System checks for first-time user

3. **Welcome Screen** (page_001 - Dashboard)
   - System displays welcome message and key features overview
   - User clicks "Get Started" button
   
4. **API Key Setup** (page_011 - User Settings)
   - System prompts for OpenAI API key
   - User enters API key
   - System encrypts and stores API key using Chrome Storage API with CryptoJS encryption
   - System validates API key with test request to OpenAI

   **Error Path A:**
   - API key validation fails
   - System shows error message with troubleshooting steps
   - User re-enters API key or skips for later

5. **Theme Selection** (page_011 - User Settings)
   - System detects browser theme setting
   - System applies matching theme (light/dark)
   - User can override with manual selection
   - System stores preference in Chrome Storage

6. **Onboarding Complete** (page_001 - Dashboard)
   - System returns to dashboard with success message
   - System highlights key features with tooltips
   - User can begin using the extension

**Performance Considerations:**
- API key validation performed asynchronously to avoid blocking UI
- Lazy loading of non-essential components during onboarding
- Progressive disclosure of features to avoid overwhelming new users

---

### 1.2 Agent Chat with Web Page Content

**Trigger:** User wants to ask AI about content on current webpage

1. **Side Panel Access** (Browser)
   - User visits webpage with relevant content
   - User opens Chrome side panel (via keyboard shortcut or icon)
   - System loads Dashboard in side panel

2. **Navigate to Agent Chat** (page_001 - Dashboard)
   - User clicks "Agent Chat" tab in navigation
   - System loads Agent Chat interface

3. **Agent Selection** (page_008 - Agent Chat)
   - System displays available AI agents (default to OpenAI)
   - User selects desired agent from dropdown
   - System loads agent configuration

4. **Content Selection** (page_008 - Agent Chat)
   - User clicks "Include Page Content" toggle
   - System extracts page content via content script
   - System displays content preview with estimated token count
   - User can optionally refine content selection:
     - Full page content
     - Selected text only (if text was selected on page)
     - Page title and URL only
     - Main content (system attempts to identify main article/content)

5. **Query Composition** (page_008 - Agent Chat)
   - User types question or instruction in message field
   - User can optionally:
     - Select a saved prompt template from list
     - Adjust context inclusion options
   - User clicks "Send" button

6. **Processing Request** (Background)
   - System combines selected content and user query
   - System sends request to OpenAI API with appropriate parameters
   - System displays typing indicator during processing
   - System streams response as it's received (if streaming enabled)

   **Error Path A:**
   - API request fails due to connection issue
   - System shows error message with retry option
   - User clicks retry or modifies request

   **Error Path B:**
   - API request fails due to token limit
   - System shows error suggesting content reduction
   - User adjusts content selection and tries again

7. **Viewing Response** (page_008 - Agent Chat)
   - System displays completed response in chat interface
   - User can read and scroll through response
   - Chat history is updated with new exchange
   - System stores conversation in IndexedDB for persistence

8. **Follow-up Actions** (page_008 - Agent Chat)
   - User can:
     - Ask follow-up questions (return to step 5)
     - Save effective prompt as template (see flow 1.3)
     - Copy response to clipboard
     - Start new conversation
     - Return to dashboard

**Performance Considerations:**
- Web Workers used for content extraction to prevent UI blocking
- Response streaming to provide immediate feedback
- Pagination of chat history for performance with large conversations
- Efficient DOM parsing for content extraction

---

### 1.3 Save and Manage Prompt Templates

**Trigger:** User wants to save an effective prompt for future reuse

1. **Trigger From Chat** (page_008 - Agent Chat)
   - After receiving successful response in chat
   - User clicks "Save Prompt" button on message

2. **Prompt Creation** (page_005 - Prompt Editor)
   - System pre-fills editor with used prompt
   - System extracts variables from prompt (if any)
   - User edits prompt content as needed
   - User adds name for prompt template

3. **Category Assignment** (page_005 - Prompt Editor)
   - System displays available categories
   - User selects category from dropdown
   - If no suitable category exists:
     - User clicks "Create New Category"
     - Modal opens for category creation
     - User enters category name
     - User confirms category creation
     - New category appears in dropdown
     - User selects new category

4. **Template Configuration** (page_005 - Prompt Editor)
   - User identifies and marks template variables (if any)
   - System highlights template variables in editor
   - User can add default values for variables
   - System shows character/token count

5. **Save Prompt** (page_005 - Prompt Editor)
   - User clicks "Save" button
   - System validates prompt (not empty, has name)
   - System saves prompt to IndexedDB via repository pattern
   - System shows success confirmation
   - System returns to previous screen (Agent Chat or Prompt Categories)

**Alternative Path - Direct Prompt Creation:**

1. **Navigate to Prompts** (page_001 - Dashboard)
   - User clicks "Prompts" in main navigation
   - System loads Prompt Categories screen

2. **Browse Categories** (page_004 - Prompt Categories)
   - System displays available categories
   - User navigates to desired category
   - User clicks "Create New Prompt" button
   - Continue from step 2 in main flow

**Alternative Path - Managing Existing Prompts:**

1. **Navigate to Prompts** (page_001 - Dashboard)
   - User clicks "Prompts" in main navigation
   - System loads Prompt Categories screen

2. **Browse Categories** (page_004 - Prompt Categories)
   - System displays available categories
   - User selects category containing target prompt
   - System displays prompts in selected category

3. **Prompt Actions** (page_004 - Prompt Categories)
   - User can:
     - Click prompt to edit (opens Prompt Editor)
     - Click delete icon to remove (confirmation required)
     - Click duplicate icon to create copy
     - Search for prompts using search bar
     - Filter prompts by usage or creation date

**Performance Considerations:**
- Lazy loading of prompt library for categories with many prompts
- Incremental search with debounced input
- Optimistic UI updates with background synchronization
- IndexedDB transactional operations for data integrity

---

### 1.4 Extract and Process Selected Web Page Content

**Trigger:** User wants to extract specific content from the current web page

1. **Content Selection on Web Page** (Browser)
   - User selects text on web page
   - User opens side panel (keyboard shortcut or icon)

2. **Content Preview** (page_001 - Dashboard)
   - System shows notification of selected content
   - User clicks "Process Selected Content" button

3. **Content Processing Options** (Modal or Inline UI)
   - System displays processing options:
     - Send to Agent Chat
     - Save to template variable
     - Summarize content
   - User selects desired action
   
4. **Send to Agent Chat** (If selected)
   - System navigates to Agent Chat (page_008)
   - Selected content is automatically included
   - Continue with Agent Chat flow (1.2)

   **Alternative Path - Save to Template Variable:**
   - System displays list of prompts with variables
   - User selects target prompt and variable
   - System stores content as variable value
   - System confirms with success message

   **Alternative Path - Summarize:**
   - System sends content to OpenAI API with summarization prompt
   - System displays summarized version
   - User can copy or send to chat

**Error Path:**
- Content too large for processing
- System shows warning with size limitation
- User can reduce selection or choose different action

**Performance Considerations:**
- Web Workers for content processing
- Progressive loading for large content selections
- Content truncation preview if approaching token limits
- Optimized DOM traversal for selected content context

---

## 2. Secondary User Flows (MVP High Priority)

### 2.1 Configure User Profile and Settings

**Trigger:** User wants to configure personal settings or security options

1. **Access Settings** (page_001 - Dashboard)
   - User clicks settings icon or "Settings" in menu
   - System loads User Settings screen

2. **Profile Settings** (page_011 - User Settings)
   - User can update:
     - Username/Display name
     - Language preference
     - Theme preference (light/dark/auto)
     - Default agent selection
   - User makes desired changes
   - System saves changes in Chrome Storage API

3. **Security Settings** (page_012 - Security Settings)
   - User navigates to Security tab
   - User can update:
     - API keys (OpenAI, other integrations)
     - Data retention settings
     - Session timeout preferences
     - Data purge options
   - User makes desired changes
   - System encrypts sensitive data using CryptoJS
   - System confirms changes with success message

4. **Storage Management** (page_011 - User Settings)
   - User navigates to Storage tab
   - System displays storage usage statistics
   - User can perform:
     - Clear conversation history
     - Export prompts/settings (future phase)
     - Import prompts/settings (future phase)
     - Reset all settings to default
   - System confirms critical actions with confirmation dialog

5. **Return to Dashboard** (page_001 - Dashboard)
   - User clicks "Save" or "Back" button
   - System applies and saves all changes
   - System returns to dashboard

**Error Path:**
- Changes fail to save due to storage limitation
- System shows error with guidance
- User adjusts settings or clears some data

**Performance Considerations:**
- Settings saved as user changes them, not just on final save
- Sensitive operations (like data purge) run in Web Worker
- Storage monitoring performed asynchronously
- Configuration validation before saving

---

### 2.2 Browse and Use Saved Prompts

**Trigger:** User wants to reuse a previously saved prompt template

1. **Access Prompt Library** (page_001 - Dashboard)
   - User clicks "Prompts" in main navigation
   - System loads Prompt Categories screen

2. **Browse Categories** (page_004 - Prompt Categories)
   - System displays category list with counts
   - User selects desired category
   - System loads prompts in selected category
   - User can use search bar to find specific prompts

3. **Prompt Selection** (page_004 - Prompt Categories)
   - User browses prompt list with previews
   - User clicks desired prompt
   - System shows prompt details and actions

4. **Prompt Usage Options** (page_004 or Modal)
   - System displays usage options:
     - Use in Agent Chat
     - Edit Prompt
     - Duplicate
     - Delete
   - User selects "Use in Agent Chat"

5. **Variable Population** (Modal or Inline UI)
   - If prompt contains variables:
     - System prompts for variable values
     - User fills in variable fields
     - User can extract web page content for variables
   - If no variables, skip to next step

6. **Navigate to Agent Chat** (page_008 - Agent Chat)
   - System navigates to Agent Chat
   - System pre-fills message with completed prompt
   - User can edit final prompt if needed
   - User clicks Send button
   - Continue with Agent Chat flow (1.2)

**Alternative Path - Direct Prompt Use:**
1. **Within Agent Chat** (page_008 - Agent Chat)
   - User clicks prompt template icon in message composer
   - System displays prompt library in dropdown/modal
   - User navigates categories and selects prompt
   - System pre-fills message with selected prompt
   - Continue with steps 5-6

**Performance Considerations:**
- Search functionality uses indexed fields in IndexedDB
- Category loading optimized with pagination for large libraries
- Prompt previews loaded on-demand rather than all at once
- Template variable processing handled efficiently

---

## 3. Future Phase User Flows (Not in MVP)

### 3.1 Create and Execute Automation Flow (Phase 2)

**Trigger:** User wants to set up automated data processing flow for web pages

1. **Access Automation** (page_001 - Dashboard)
   - User clicks "Automations" in main navigation
   - System loads Automation Categories screen

2. **Create New Flow** (page_002 - Automation Categories)
   - User navigates to desired category
   - User clicks "Create New Flow" button
   - System loads Automation Flow editor

3. **Flow Configuration** (page_003 - Automation Flows)
   - User enters flow name and description
   - User configures data selection options:
     - Page content (full/main article)
     - Metadata (title, URL, description)
     - Selected text (if applicable)
     - Custom selectors (CSS/XPath)
   - System provides real-time preview with current page

4. **Webhook Configuration** (page_003 - Automation Flows)
   - User enters webhook URL
   - User selects authentication method:
     - No auth
     - API Key (header/query)
     - Basic Auth
     - Bearer Token
   - User enters authentication details
   - System encrypts sensitive credentials

5. **Flow Testing** (page_003 - Automation Flows)
   - User clicks "Test Flow" button
   - System extracts data based on configuration
   - System sends test request to webhook
   - System displays response and status
   - User can adjust configuration based on results

6. **Save Flow** (page_003 - Automation Flows)
   - User clicks "Save Flow" button
   - System validates all required fields
   - System saves flow configuration to IndexedDB
   - System shows success confirmation
   - System returns to Automation Categories

7. **Execute Flow** (From Any Page)
   - User navigates to web page
   - User clicks Yorizon Buddy extension icon
   - User selects "Execute Flow" from menu
   - System displays available flows
   - User selects desired flow
   - System executes flow and shows progress
   - System displays result notification

**Error Path:**
- Webhook request fails during execution
- System shows error with details
- User can view logs and troubleshoot
- System offers retry option

**Performance Considerations:**
- Web Workers for data extraction and processing
- Request queuing for multiple executions
- Background processing with status updates
- Error logging and diagnostic information

---

### 3.2 Record and Process Voice Input (Phase 3)

**Trigger:** User wants to record voice for processing or transcription

1. **Access Voice System** (page_001 - Dashboard)
   - User clicks "Voice" in main navigation
   - System loads Voice Channels screen

2. **Select Voice Channel** (page_009 - Voice Channels)
   - System displays configured voice channels
   - User selects desired channel or creates new one
   - System loads Voice Recording interface

3. **Record Voice Input** (page_010 - Voice Recording)
   - System requests microphone permission (if needed)
   - User clicks "Start Recording" button
   - System displays recording visualization
   - User speaks message
   - User clicks "Stop Recording" button

4. **Review Recording** (page_010 - Voice Recording)
   - System displays recording controls
   - User can play recording for review
   - User can re-record if needed
   - User selects processing options:
     - Transcription toggle
     - Include page context option
     - Processing quality setting

5. **Process Voice Recording** (page_010 - Voice Recording)
   - User clicks "Process" button
   - System sends audio to configured webhook/service
   - System displays processing progress
   - System receives and displays results

   **Alternative Path - Send to Agent:**
   - User selects "Send to Agent" option
   - System transcribes audio (if not already)
   - System sends transcription to Agent Chat
   - Continue with Agent Chat flow (1.2)

**Error Path:**
- Microphone access denied
- System shows error with browser settings guidance
- User adjusts permissions and retries

**Performance Considerations:**
- Audio processing in Web Worker
- Progressive upload for large recordings
- Efficient audio format conversion
- Caching of frequently used voice channels

---

### 3.3 Configure and Use Multiple Agents (Phase 2)

**Trigger:** User wants to configure multiple AI providers or webhook agents

1. **Access Agent Dashboard** (page_001 - Dashboard)
   - User clicks "Agents" in main navigation
   - System loads Agent Dashboard

2. **Create New Agent** (page_006 - Agent Dashboard)
   - User clicks "Create New Agent" button
   - System displays agent type selection:
     - OpenAI (GPT models)
     - Custom LLM provider
     - Webhook agent
   - User selects desired type
   - System loads Agent Configuration screen

3. **Configure Agent Settings** (page_007 - Agent Configuration)
   - User enters agent name and description
   - Based on agent type, user configures:
     - API endpoints and keys
     - Model parameters
     - Webhook URLs and authentication
     - Context handling preferences
   - System validates configuration fields
   - System encrypts sensitive information

4. **Test Agent Connection** (page_007 - Agent Configuration)
   - User clicks "Test Connection" button
   - System sends test request to configured endpoint
   - System displays test results
   - User adjusts configuration if needed

5. **Save Agent Configuration** (page_007 - Agent Configuration)
   - User clicks "Save" button
   - System validates required fields
   - System saves configuration to storage
   - System shows success confirmation
   - System returns to Agent Dashboard

6. **Agent Usage** (page_008 - Agent Chat)
   - User navigates to Agent Chat
   - System displays agent selection dropdown
   - User selects configured agent
   - User interacts with selected agent
   - System uses appropriate API/webhook based on configuration

**Error Path:**
- Agent configuration test fails
- System shows detailed error information
- User adjusts configuration and retries

**Performance Considerations:**
- Asynchronous agent tests without blocking UI
- Encrypted storage for API keys and credentials
- Configuration validation before saving
- Optimized agent switching with context preservation

---

### 3.4 Import/Export System Data (Phase 2)

**Trigger:** User wants to backup settings or transfer data between devices

1. **Access Settings** (page_001 - Dashboard)
   - User clicks settings icon or "Settings" in menu
   - System loads User Settings screen

2. **Navigate to Backup/Restore** (page_011 - User Settings)
   - User selects "Backup & Export" tab
   - System displays backup and export options

3. **Export Data** (page_011 - User Settings)
   - User selects data to export:
     - Prompt templates
     - Automation flows
     - Agent configurations
     - Settings (excluding sensitive keys)
     - All data
   - User clicks "Export Selected" button
   - System generates JSON export file
   - System encrypts sensitive data in export
   - System triggers file download

4. **Import Data** (page_011 - User Settings)
   - User clicks "Import Data" button
   - System displays file selector
   - User selects previously exported file
   - System validates file format
   - System displays import preview with conflicts
   - User selects conflict resolution strategy:
     - Overwrite existing
     - Keep existing
     - Merge where possible
   - User clicks "Confirm Import" button

5. **Process Import** (page_011 - User Settings)
   - System processes import according to selections
   - System displays progress indicator
   - System shows success confirmation with summary
   - User clicks "Done" to return to settings

**Error Path:**
- Invalid import file
- System shows error with file requirements
- User selects different file or cancels

**Performance Considerations:**
- Import/export operations run in Web Worker
- Progressive processing for large datasets
- Chunked operations to prevent UI blocking
- Conflict detection before processing full import

---

## 4. Primary User Journey Maps

### Knowledge Worker Research Journey (MVP Essential)

1. **Web Research Phase**
   - User browses various web pages in research process
   - When finding important content:
     - Opens side panel (page_001)
     - Navigates to Agent Chat (page_008)
     - Includes page content or selection
     - Asks AI to summarize, analyze, or extract key points
     - Reviews AI response
     - Saves effective prompts (page_005)
     - Continues browsing to next source

2. **Information Synthesis Phase**
   - User opens side panel
   - Reviews saved prompts (page_004)
   - Selects prompts for synthesis tasks
   - Uses Agent Chat (page_008) with previously saved information
   - Asks AI to compare sources, identify patterns, suggest conclusions
   - Refines prompts based on results

3. **Output Creation Phase**
   - User leverages insights from AI interactions
   - Creates final research output in external tools
   - Uses extension to fact-check or clarify points as needed

**Technical Touchpoints:**
- Content extraction via content scripts
- Chrome Storage and IndexedDB for prompt storage
- OpenAI API integration for analysis
- React with Context API for UI state management

---

### Content Creator Workflow (MVP Essential)

1. **Inspiration & Research Phase**
   - User browses web for inspiration and source material
   - Opens side panel when finding useful content
   - Uses Agent Chat to generate ideas, outlines, or variations
   - Saves effective prompts for ideation

2. **Content Development Phase**
   - User drafts content in external tool
   - Uses side panel for:
     - Fact-checking
     - Language improvement suggestions
     - Alternative phrasings
     - Formatting recommendations
   - Refines prompts to improve agent responses

3. **Review & Optimization Phase**
   - User submits draft content to agent for feedback
   - Receives suggestions for improvements
   - Iteratively refines content with AI assistance

**Technical Touchpoints:**
- Rich text handling with DraftJS/SlateJS
- Text selection and processing via content scripts
- Token counting and context management
- OpenAI API streaming for responsive feedback

---

### Professional Integration Workflow (Phase 2 - Post MVP)

1. **Workflow Setup Phase**
   - User configures automation flows (page_002, page_003)
   - Sets up webhook connections to external systems
   - Tests flows with sample data
   - Organizes flows in categories

2. **Data Collection Phase**
   - User visits relevant web pages
   - Executes appropriate automation flows
   - Reviews successful data transmission
   - Troubleshoots any connection issues

3. **System Integration Phase**
   - External systems process data from webhooks
   - User receives confirmations or results
   - User refines automation flows based on results

**Technical Touchpoints:**
- Webhook configuration and transmission
- IndexedDB for flow storage
- Web Workers for background processing
- React Context API for flow state management

---

## 5. Error and Edge Case Flows

### 5.1 API Rate Limit Handling

**Trigger:** OpenAI API returns rate limit error

1. **Error Detection** (page_008 - Agent Chat)
   - User sends request to Agent Chat
   - System detects rate limit error in API response
   - System intercepts error before displaying to user

2. **User Notification** (page_008 - Agent Chat)
   - System displays specific rate limit error message
   - System shows estimated wait time if available
   - System offers options:
     - Wait and retry automatically
     - Modify request to use different model
     - Save draft and try later

3. **Resolution Path** (page_008 - Agent Chat)
   - If user selects auto-retry:
     - System implements exponential backoff
     - System shows progress/wait indicator
     - System retries when appropriate
   - If user modifies request:
     - System preserves original message
     - User selects different model or reduces content
     - System processes new request

**Performance Considerations:**
- Caching of partial results when available
- Background retry handling to allow other operations
- Token count estimation to help avoid limits
- Rate tracking to prevent multiple limit hits

---

### 5.2 Browser Storage Limit Reached

**Trigger:** Storage operation fails due to quota limits

1. **Error Detection** (Any Page)
   - User attempts operation requiring storage
   - System detects storage quota error
   - System intercepts normal flow

2. **Storage Management** (Modal)
   - System displays storage limit notification
   - System shows current usage statistics
   - System suggests cleanup options:
     - Delete old conversations
     - Clear unused prompts
     - Reduce data retention period
     - Export and delete rarely used items

3. **User Action** (Modal)
   - User selects cleanup strategy
   - System executes cleanup operation
   - System shows recovered space
   - System retries original operation

**Alternative Path - Automatic Management:**
- System identifies low-priority data
- System asks permission to auto-clean
- User approves automatic cleanup
- System performs optimization and continues

**Performance Considerations:**
- Progressive cleanup to minimize disruption
- Prioritization of critical vs. non-critical data
- Compression of stored data when possible
- Optimistic UI updates during cleanup

---

### 5.3 Extension Permissions Update

**Trigger:** New version requires additional permissions

1. **Update Detection** (page_001 - Dashboard)
   - User opens extension after update
   - System detects permission change requirement
   - System displays permission notification

2. **Permission Request** (Modal)
   - System explains required permissions
   - System provides rationale for each permission
   - System gives options:
     - Grant all permissions
     - Choose permissions individually
     - Skip (with limited functionality)

3. **Permission Handling** (Modal)
   - Based on user selection:
     - System requests selected permissions
     - Browser shows standard permission dialog
     - User confirms in browser dialog
   - System detects granted permissions
   - System adapts available functionality

**Error Path:**
- User denies critical permissions
- System shows limited functionality notice
- System offers guidance to enable later
- User continues with restricted feature set

**Performance Considerations:**
- Feature detection for graceful degradation
- Modular loading based on available permissions
- Clear communication of permission impact

---

## 6. System Process Flows

### 6.1 Data Synchronization Process

**Trigger:** System detects data changes requiring synchronization

1. **Change Detection**
   - System monitors data changes via repository pattern
   - When changes exceed threshold or timer triggers:
     - System flags data for synchronization
     - System evaluates synchronization priority

2. **Synchronization Queue**
   - System adds synchronization tasks to queue
   - Tasks are processed based on:
     - Priority (critical vs. non-critical)
     - Data size (smaller first)
     - Dependency chain

3. **Storage Operations**
   - System processes queue in Web Worker
   - For each item:
     - Load current data from appropriate store
     - Apply changes with consistency checks
     - Write updated data with transactional safety
     - Mark as synchronized
   
4. **Conflict Resolution**
   - If conflicts detected:
     - System applies conflict resolution strategy
     - For critical conflicts, prompts user
     - For non-critical, uses predefined rules
   - System logs resolution decisions

**Performance Considerations:**
- Batched operations for efficiency
- Prioritized critical data synchronization
- Background processing with low priority
- Throttling during heavy user interaction

---

### 6.2 Extension Startup Process

**Trigger:** Chrome extension is loaded or browser is started

1. **Initial Loading**
   - Browser loads extension background script
   - System initializes core services:
     - Storage service
     - Authentication service
     - Messaging service
   - System performs migration check

2. **State Restoration**
   - System loads user settings from Chrome Storage
   - System initializes Redux/Zustand store
   - System restores last session state if applicable
   - System checks for pending operations

3. **Feature Initialization**
   - System initializes features based on priority:
     - Essential features immediately
     - Secondary features on demand
     - Background features after UI ready
   - System registers event listeners

4. **Ready State**
   - System sets internal state to ready
   - System enables user interaction
   - System processes any queued actions
   - System checks for updates or notifications

**Performance Considerations:**
- Progressive initialization based on feature priority
- Lazy loading of non-critical components
- Caching of frequently accessed data
- Background initialization of resource-intensive features

---

### 6.3 Data Extraction Process

**Trigger:** Feature requests content extraction from web page

1. **Extraction Request**
   - Feature calls content extraction service
   - System determines extraction scope:
     - Full page
     - Selected text
     - Main content
     - Custom selector

2. **Worker Initialization**
   - System initializes Web Worker for extraction
   - System passes extraction parameters to worker
   - UI shows extraction in progress indicator

3. **Content Processing**
   - Worker executes appropriate extraction strategy:
     - DOM traversal for specific elements
     - Text selection boundaries for user selection
     - Readability algorithms for main content
     - Metadata extraction for page information
   - Worker performs initial processing:
     - HTML sanitization
     - Content cleaning
     - Structure normalization

4. **Result Delivery**
   - Worker completes processing and returns result
   - System receives processed content
   - System performs token counting if needed
   - System delivers content to requesting feature
   - UI updates with extraction complete

**Performance Considerations:**
- Web Worker implementation to prevent UI blocking
- Progressive processing of large documents
- Optimized DOM traversal algorithms
- Caching of extraction results when appropriate

---

## 7. User Flow Diagrams

The flows described above provide the detailed structure for user interactions in the Yorizon Buddy extension. These flows focus on the MVP essential features while acknowledging future capabilities. The development team should prioritize implementing flows 1.1 through 2.2 for the MVP phase, with the remaining flows targeted for future releases according to the roadmap.

When creating the visual components and page designs, focus on enabling smooth transitions between these flows and ensuring the interface supports all decision points and user actions described. The side panel context presents unique UI constraints that should be considered, particularly regarding vertical space utilization and the need for efficient navigation between features.